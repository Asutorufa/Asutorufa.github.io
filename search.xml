<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[解决xfce4画面撕裂]]></title>
    <url>%2Fposts%2F38868ade%2F</url>
    <content type="text"><![CDATA[安装compton1sudo apt install compton 修改配置文件compton的配置文件在~/.config/compton.conf因为有些窗口的阴影有时候会变的很奇怪,大概你有可能需要修改以下,附上我的:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223################################### Backend################################### Backend to use: "xrender" or "glx".# GLX backend is typically much faster but depends on a sane driver.backend = "glx";################################### GLX backend##################################glx-no-stencil = true;# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,# but a 20% increase when only 1/4 is.# My tests on nouveau show terrible slowdown.# Useful with --glx-swap-method, as well.glx-copy-from-front = false;# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.# May break VSync and is not available on some drivers.# Overrides --glx-copy-from-front.# glx-use-copysubbuffermesa = true;# GLX backend: Avoid rebinding pixmap on window damage.# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).# Recommended if it works.# glx-no-rebind-pixmap = true;# GLX backend: GLX buffer swap method we assume.# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).# undefined is the slowest and the safest, and the default value.# copy is fastest, but may fail on some drivers,# 2-6 are gradually slower but safer (6 is still faster than 0).# Usually, double buffer means 2, triple buffer means 3.# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.# Useless with --glx-use-copysubbuffermesa.# Partially breaks --resize-damage.# Defaults to undefined.glx-swap-method = "undefined";################################### Shadows################################### Enabled client-side shadows on windows.shadow = true;# Don't draw shadows on DND windows.no-dnd-shadow = true;# Avoid drawing shadows on dock/panel windows.no-dock-shadow = true;# Zero the part of the shadow's mask behind the window. Fix some weirdness with ARGB windows.#clear-shadow = true;# The blur radius for shadows. (default 12)shadow-radius = 5;# The left offset for shadows. (default -15)shadow-offset-x = -5;# The top offset for shadows. (default -15)shadow-offset-y = -5;# The translucency for shadows. (default .75)shadow-opacity = 0.5;# Set if you want different colour shadows# shadow-red = 0.0;# shadow-green = 0.0;# shadow-blue = 0.0;# The shadow exclude options are helpful if you have shadows enabled. #Due to the way compton draws its shadows, certain applications will have visual glitches# (most applications are fine, only apps that do weird things with xshapes or argb are affected).# This list includes all the affected apps I found in my testing. #The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.#此处加入排除阴影的程序名字shadow-exclude = [ "! name~=''", "name = 'Notification'", "name = 'Plank'", "name = 'Docky'", "name = 'Kupfer'", "name = 'xfce4-notifyd'", "name *= 'VLC'", "name *= 'compton'", "name *= 'gedit'", "name *= 'Archive Manager'",# "name *= 'Chromium'",# "name *= 'Chrome'",# "name *= 'Firefox'", "class_g = 'Conky'", "class_g = 'Kupfer'", "class_g = 'Synapse'", "class_g ?= 'Notify-osd'", "class_g ?= 'Cairo-dock'", "class_g ?= 'Xfce4-notifyd'", "class_g ?= 'Xfce4-power-manager'"];# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)shadow-ignore-shaped = false;################################### Opacity##################################################################### Fading################################### Fade windows during opacity changes.fading = true;# The time between steps in a fade in milliseconds. (default 10).fade-delta = 4;# Opacity change between steps while fading in. (default 0.028).#fade-in-step = 0.03;# Opacity change between steps while fading out. (default 0.03).#fade-out-step = 0.03;# Fade windows in/out when opening/closing#no-fading-openclose = true;# Specify a list of conditions of windows that should not be faded.#fade-exclude = [ ];fade-exclude = [ ];################################### Other################################### Try to detect WM windows and mark them as active.mark-wmwin-focused = true;# Mark all non-WM but override-redirect windows active (e.g. menus).mark-ovredir-focused = true;# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.# Usually more reliable but depends on a EWMH-compliant WM.use-ewmh-active-win = true;# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.detect-rounded-corners = true;# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.# This prevents opacity being ignored for some apps.# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.#detect-client-opacity = true;# Specify refresh rate of the screen.# If not specified or 0, compton will try detecting this with X RandR extension.refresh-rate = 0;# Set VSync method. VSync methods currently available:# none: No VSync# drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.# opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.# opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.# opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. #Works only with GLX backend. Known to be most effective on many drivers. #Does not actually control paint timing, only buffer swap is affected, #so it doesn’t have the effect of --sw-opti unlike other methods. Experimental.# opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the extension we use.# (Note some VSync methods may not be enabled at compile time.)vsync = "opengl-swc";# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.# Reported to have no effect, though.dbe = false;# Painting on X Composite overlay window. Recommended.paint-on-overlay = true;# Limit compton to repaint at most once every 1 / refresh_rate second to boost performance.# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,# unless you wish to specify a lower refresh rate than the actual value.sw-opti = false;# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.# Known to cause flickering when redirecting/unredirecting windows.# paint-on-overlay may make the flickering less obvious.unredir-if-possible = false;# Specify a list of conditions of windows that should always be considered focused.focus-exclude = [ ];# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.detect-transient = true;# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.detect-client-leader = true;################################### Window type settings##################################wintypes:&#123; tooltip = &#123; # fade: Fade the particular type of windows. fade = true; # shadow: Give those windows shadow shadow = false; # opacity: Default opacity for the type of windows. opacity = 0.85; # focus: Whether to always consider windows of this type focused. focus = true; &#125;;&#125;; 关闭xfce4自带的合成器设置管理器-&gt;窗口管理器微调-&gt;合成器 启动compton前台运行1compton 后台运行1### compton -b 开机自启动修改~/.xprofile文件将compton -b直接加到新的一行就行了]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>xfce4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下intel&AMD双显卡切换]]></title>
    <url>%2Fposts%2F3b8b96de%2F</url>
    <content type="text"><![CDATA[使用xrandr显示可支持的显卡 1xrandr --listproviders 输出类似以下内容 123Providers: number : 2Provider 0: id: 0x6b cap: 0x9, Source Output, Sink Offload crtcs: 3 outputs: 7 associated providers: 1 name:modesettingProvider 1: id: 0x41 cap: 0x6, Sink Output, Source Offload crtcs: 2 outputs: 0 associated providers: 1 name:OLAND @ pci:0000:01:00.0 To be able to render GPU-intensive applications by the more powerful discrete card use 1xrandr --setprovideroffloadsink 1 0 或者 1xrandr --setprovideroffloadsink 0x41 0x6b 使用DRI_PRIME为某个应用选择使用哪一张显卡,使用glxinfo可以查看正在使用的显卡 12DRI_PRIME=0 glxinfo | grep "OpenGL renderer"DRI_PRIME=1 glxinfo | grep "OpenGL renderer" 如为steam启用独显 1DRI_PRIME=1 steam 参考资料: 1.Intel/AMD Hybrid graphics Ubuntu 18.04 2.PRIME (简体中文)]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>双显卡</tag>
        <tag>amd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python使用lxml分析网页]]></title>
    <url>%2Fposts%2F77d15527%2F</url>
    <content type="text"><![CDATA[首先得引入lxml 12345#xpath为frome lxml import etree#cssselector为import lxml.html#cssselector使用起来简单但功能比xpath少 cssselector12345678910111213tree = lxml.html.fromstring('你获取的网页源代码文件或变量')css = tree.cssselect('要选择的内容')#例如tree.cssselect('div.word-info &gt; div.pronounces &gt; span.word-audio')#选择器选择的结果为listcss.text_content()#表示选择的内容css.attrib['要表示的标签属性']#如css.attrb['class']表示的就是所选择内容的class属性 如果选择的内容换行符太多可以使用split表示成list去除 说明 例子 选择所有标签 * 选择&lt;a>标签 a 选择所有class=”link”的标签 .link 选择class=”link”的&lt;a>标签 a.link 选择id=”home”的&lt;a>标签 a#home 选择父元素为&lt;a>标签的所有&lt;span>标签 a &gt; span 选择&lt;a>标签内部的所有&lt;span>标签 a span 选择title属性为”Home”的所有&lt;a>标签 a[title=Home] xpath1234selector=etree.HTML('你获取的网页源代码文件或变量')css = selector.xpath('要选择的内容')#xpath可直接表示#xpath可选择并表示属性 xpath由于内容太多,可以直接参考官方文档]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python获取网页源码(爬虫?)]]></title>
    <url>%2Fposts%2Fcee10602%2F</url>
    <content type="text"><![CDATA[利用requrst,使用首先要1import requests 使用方法123url = '要获取的网页地址'useragent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'#user-agent 可有可无,有些网页防爬虫就要模拟浏览器requests.get(url,headers=&#123;'User-Agent':useragent&#125;))]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[snap删除旧的core(snap删除其他版本的软件)]]></title>
    <url>%2Fposts%2Fb6b8953%2F</url>
    <content type="text"><![CDATA[偶尔发现snap会自动升级core且不删除旧版，在’/snap/core’会发现好几个版本的文件夹。使用 1sudo snap remove core --revision xxx 删除某个版本的core，xxx是软件的rev，使用 1snap list 可以查看软件的rev，其他软件也能用这个方法删除旧的版本哦。 参考：How to unmount and possibly delete old Ubuntu Core snap]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>snap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu终端下连接wifi]]></title>
    <url>%2Fposts%2Ffb6d8628%2F</url>
    <content type="text"><![CDATA[首先使用rfkill查看你的wifi设备是否被停用使用命令1rfkill list 获得设备列表，每个都包含与之关联的索引号，从 0 开始查看设备是否被停用，要启用被停用的设备，请运行：1rfkill unblock &lt;索引号&gt; 要启用所有设备，请运行：1rfkill unblock all 您可以使用这个索引号让 rfkill 停使或者使用某个设备，例如：1rfkill block 0 您还可以使用 rfkill 阻断某一类设备，或者所有启用了RFKill的设备。例如：1rfkill block wifi 停用系统中的所有Wi-Fi设备 启用无线网卡1ifconfig wlan0 up 使用iwconfig命令搜索无线网1iwlist wlan0 scan 记下essid连接无密码的无线网1iwconfig wlan0 essid essidname 其中essidname是搜索到的无线网essid连接有密码的无线网1iwconfig wlan0 essid essidname key &lt;密码&gt; 补充通过dhcp获取IP1dhclient wlan0 或1dhcpcd wlan0]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[暗影精灵更改efi启动顺序]]></title>
    <url>%2Fposts%2F6683eff9%2F</url>
    <content type="text"><![CDATA[暗影精灵安装完ubuntu之后只能开机按esc+f9进入ubuntu，否则会直接启动windows,虽然可以使用但及其不方便的说 首先从ubuntu进入/boot/efi/EFI备份windwos的启动文件（切记一定要备份，否则只能从pe重新建立windwos启动项）1cp -arf Microsoft win10 将ubuntu的grubx64.efi替换掉EFI/Microsoft/Boot/bootmgfw.efi文件 1cp -arf ubuntu/grubx64.efi Microsoft/Boot/bootmgfw.efi 这样替换之后grub就接管了系统的启动 然后将/boot/grub/grub.cfg中关于windows的启动段复制到/etc/grub.d/40_custom中将chainloader /EFI/Micorosoft/Boot/bootmgfw.efi改为chainloader /EFI/win10/Boot/bootmgfw.efi就是把中间那个改为你备份的文件夹，可以改一改前面的启动名称最后执行update-grub来更新启动项 但是windwos有大更新的时候会把更改的覆盖掉，再来一遍就好了参考文章暗影精灵2pro安装win10+ubuntu16.10双系统]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>BIOS</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[関西弁コレクション]]></title>
    <url>%2Fposts%2Fa4241e7%2F</url>
    <content type="text"><![CDATA[平常看到的関西弁（かんさいべん）会在这里记录–2018年12月8日– せ や か ら ア カ ン て ゆ う た や ろせやから 別表記：そやから「だから」の意味。主に関西地方で用いる。「そやから」ともいう。 アカン(あかん)関西弁で「ダメ」の意味。 『ゆうて』は『～言って』 ##方言で だから ダメって 言ったでしょ –2018年8月29日– ビビり【名词】1.颤动，振纹（机械）2.胆小，大阪方言。#関西弁 女子|假名:おなご【名词】1.女孩，女孩子。2.妇女，女子。3.女仆，该说法多用于关西地区。详细解释:名词女孩，女孩子。（女の子、女児）。妇女，女子。（女の人、女性、婦人）。女仆，该说法多用于关西地区。（召し使いの女、女中、はしため）。 –2018年8月7日更新– それアカンやつや一字一句、分けてみましょう。「それ、アカン、やつ、や」になります。「それ」はthatのことですよね。「アカン」はNOのことです。その通り、関西弁です。「やつ」は奴のことです。人を愚弄する言い方ですね。でも人以外に、ものに対しても指す場合があります。「や」も関西弁です。これを東京の人が話すと「それはいけない人だよね～」や「それはありえないよね～」という言い方になります。元ネタを想像すると、ここでは「やつ」はものを指していると思います。 せ や な同意を表明する語。関西弁。「そうだね」、「そうだな」などに相当する。 しんどい 【形容词/イ形容词】1.日本关西方言，费劲，吃力。累。疲劳。**详细解释/例句:***源自:《现代日汉双解词典》外教社形容词/イ形容词骨が折れる。難儀だ。麻烦。费劲。この仕事はしんどい。这个工作费劲（麻烦）。くたびれている。疲乏。劳累。疲劳。しんどくてもこの仕事をやってしまおう。即使累，也要把这个工作干完。おお，しんどい。好累！ –之前更新– ほんま 【本真】（ 名 ・形動 ）本当である・こと（さま）。真実。主に関西地方で用いる。 「 －の話やで」 「 －に驚いたわ」 しゃあない【方言】 ;大阪话。没办法、没辙了。（大阪弁で「しかたない」の意味である。） アカン感叹词不行，不可以。（（「埒らち明かぬ」の略。多く関西で使う）うまくいかない。だめだ。不可である。） アホやん跟冒失娘（ドジっ娘）类似，关西方言 注:冒失娘（ドジっ娘），萌属性之一。此属性以女性为主，若是男性可用较中性的“ドジっ子”。日文“どじ”或“どぢ”是指人或事的出错和失误。“ドジっ娘”就是指经常弄翻物件、行事笨拙、“大错不出，小错不断”，总是搞出呆呆笨笨事情的少女。中文意译的“冒失”，是指做事有漏失，而不是为人鲁莽无礼的意思。どじっ应该不写成汉字参考自维基百科]]></content>
      <categories>
        <category>日语</category>
      </categories>
      <tags>
        <tag>日语</tag>
        <tag>関西弁</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript对字符串操作]]></title>
    <url>%2Fposts%2F86cfa6a%2F</url>
    <content type="text"><![CDATA[1234var name='aaaa';var age='bbbb';var change='Hello javascript';var message=`hello,$&#123;name&#125;,$&#123;age&#125;,`+name+age;//将多个字符串写成一句话 1var length=message.length;//获取字符串长度 1var upper=message.toUpperCase();//把字符串全部变成大写 1var lower=message.toLowerCase();//把字符串全部变成小写 1var search=message.indexOf('aaaa');//搜索字符串位置 1var substr=message.substring(9, 15);//返回区间内字符串 12x=document.getElementById("test"); //查找元素x.innerHTML="Hello JavaScript"; //改变内容]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让win10的UWP应用走代理]]></title>
    <url>%2Fposts%2Fd22ffdb6%2F</url>
    <content type="text"><![CDATA[原因因为uwp应用的特殊性,即使使用proxifier和proxycap这种应用者无法让其走代理 1.SSTAP这个应用是创建虚拟网卡,让windows全局走代理.但其有弊端就是有一些国内的网站也会走代理,比如BILIBILI.虽然可以自己写规则但实在是麻烦无比. 2.fiddler利用fiddler的winconfig实现uwp应用走代理把要走代理的应用勾上但这不是全局代理,只能让uwp应用走代理]]></content>
      <categories>
        <category>使用技巧</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言数组输出的另一种方法]]></title>
    <url>%2Fposts%2F854ed6ec%2F</url>
    <content type="text"><![CDATA[今天看到这样一种写法,原文链接:一个有趣的C语言程序 123456789#include &lt;stdio.h&gt; int main()&#123; int a = 1; int x[5]=&#123;1,2,3,4,5&#125;; printf("%d",a[x]); return 0;&#125; 1output: 2 int x[5],x实际上保存的是这个数组首元素的地址也就是&amp;x[0].a[x]的等效写法是*(a+&amp;x).因为上面说了x实际上是x[0].所以可以进一步写成*(a+&amp;x[0]),又因为a=1所以可以替换成*(&amp;x[0]+1),也就是x[1].所以就是x[1]对应的值：2 由此我又想到了二位数组123456789#include &lt;stdio.h&gt; int main()&#123; int a = 1; int x[2][2]=&#123;&#123;1,2&#125;,&#123;3,4&#125;&#125;; printf("%d",a[a[x]]); return 0;&#125; 1output: 4 感觉好神奇,而且在之前不知道在哪看到c语言的数组其实就是指针的合集,而且最近要用链表,更觉得链表和数组差不多.]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用结构体让函数返回多个值]]></title>
    <url>%2Fposts%2Fc69434f1%2F</url>
    <content type="text"><![CDATA[c语言123456789101112131415161718192021222324#include "stdio.h"typedef struct test //建立结构体&#123; int a; int b; int c;&#125;T;T testt(int aa,int bb,int cc) //建立函数&#123; T aaa; aaa.a=aa*bb; aaa.b=aa*cc; aaa.c=bb*cc; return aaa; //返回结构&#125;int main()&#123; T b=testt(4,5,6); printf("%d %d %d \n",b.a,b.b,b.c); T *f=&amp;b; printf("%d %d %d",f-&gt;a,f-&gt;b,f-&gt;c);&#125; C++ 123456789101112131415161718192021222324252627#include "iostream"typedef struct sss //建立结构体&#123; int a; int b; int c;&#125;S;S s(double a,double b,double c) 建立函数&#123; S d; d.a=a*a; d.b=b*b; d.c=c*c; return d;//返回结构体&#125;int main()&#123; S z=s(3,4,5); std::cout&lt;&lt;z.a &lt;&lt;std::endl &lt;&lt;z.b &lt;&lt;std::endl &lt;&lt;z.c &lt;&lt;std::endl;&#125;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>编程</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言基本类型在内存中的存储方式]]></title>
    <url>%2Fposts%2Fe404489%2F</url>
    <content type="text"><![CDATA[浮点数float 符号位 + 指数位 + 尾数位 ↑ ↑ ↑ 第一位 8位 23位 double 符号位 + 指数位 + 尾数位 ↑ ↑ ↑ 第一位 11位 52位 整数整数在内存中是以补码的形式存储 正整数原码=反码=补码 负整数原码即为原码反码=原码符号为不变,其余取反(注:第一位为符号位)补码=反码+1]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java和c++简单的递归调用]]></title>
    <url>%2Fposts%2F5eb800c7%2F</url>
    <content type="text"><![CDATA[题目是盗来的12345678猴子吃桃问题。猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第n天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少桃子。例如：输入：3输出：10输入：10输出：1534 C++:12345678910111213141516171819202122232425#include "iostream"using namespace std;long long d(int);int main(int argc, char const *argv[])&#123; int a; cin&gt;&gt;a; cout&lt;&lt;d(a)&lt;&lt;endl; return 0;&#125;long long d(int a)&#123; long long e; if(a==1) &#123; e=1; &#125; else if(a&gt;1) &#123; e=(d(a-1)+1)*2; &#125; return e;&#125; java:12345678910111213141516171819202122232425import java.util.*;public class dgcs&#123; public static void main(String[] args) &#123; Scanner in=new Scanner(System.in); int a=in.nextInt(); System.out.println(f(a)); &#125; public static long f(int a) &#123; long e; if(a==1) &#123; e=1; &#125; else &#123; e=(f(a-1)+1)*2; &#125; return e; &#125;&#125;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>c++</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言利用char指针变量将int按字节打印地址]]></title>
    <url>%2Fposts%2F43cb2931%2F</url>
    <content type="text"><![CDATA[因为int变量的大小为四个字节,所以如果利用int指针变量+1输出地址的话,实际上是加了四个字节后的地址.而char的大小刚好为一个字节,是我们想要的东西.这样我们可以强制转换为char指针变量输出每个字节的地址然后+1,+2,+3来分别输出int的四个字节的地址,得到我们想要的内容.代码如下123int a=-65;char *b=(char *)&amp;a;printf("%p\n%p\n%p\n%p\n",a,a+1,a+2,a+3); 如果你想按字节输出内存中的内容可以这样写,这里我输出的是16进制整数.123int a=-65;char *b=(char *)&amp;a;printf("%02x\n%02x\n%02x\n%02x\n",*(unsigned char*)a,*(unsigned char*)(a+1),*(unsigned char*)(a+2),*(unsigned char*)(a+3)); 两者结合一下123int a=-65;char *b=(char *)&amp;a;printf("%p %02x\n%p %02x\n%p %02x\n%p %02x\n",a,*(unsigned char*)a,a+1,*(unsigned char*)(a+1),a+2,*(unsigned char*)(a+2),a+3,*(unsigned char*)(a+3)); 输出内容如图有任何错误请邮箱联系我指出我的错误,万分感谢]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c语言中格式化字符的应用]]></title>
    <url>%2Fposts%2Fb6b4601%2F</url>
    <content type="text"><![CDATA[格式化规定符符号 作用%d 十进制有符号整数%u 十进制无符号整数%f 浮点数%s 字符串%c 单个字符%p 指针的值%e 指数形式的浮点数%x, %X 无符号以十六进制表示的整数%0 无符号以八进制表示的整数%g 自动选择合适的表示法 说明:(1). 可以在”%”和字母之间插进数字表示最大场宽。例如: %3d 表示输出3位整型数, 不够3位右对齐。%9.2f 表示输出场宽为9的浮点数, 其中小数位为2, 整数位为6,小数点占一位, 不够9位右对齐。另外, 若想在输出值前加一些0, 就应在场宽项前加个0。例如: %04d 表示在输出一个小于4位的数值时, 将在前面补0使其总宽度为4位。如果用浮点数表示字符或整型量的输出格式, 小数点后的数字代表最大宽度,小数点前的数字代表最小宽度。例如: %6.9s 表示显示一个长度不小于6且不大于9的字符串。若大于9, 则第9个字符以后的内容将被删除。(2). 可以在”%”和字母之间加小写字母l, 表示输出的是长型数。例如: %ld 表示输出long整数,%lf 表示输出double浮点数(3). 可以控制输出左对齐或右对齐, 即在”%”和字母之间加入一个”-“ 号可说明输出为左对齐, 否则为右对齐。例如: %-7d 表示输出7位整数左对齐,%-10s 表示输出10个字符左对齐. 一些特殊规定字符字符 作用/n 换行/f 清屏并换页/r 回车/t Tab符/xhh 表示一个ASCII码用16进表示,其中hh是1到2个16进制数]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用等价无穷小的一般形式]]></title>
    <url>%2Fposts%2F10bb899d%2F</url>
    <content type="text"><![CDATA[当$\lim_{φ(x)\to0}$时,$\sin φ(x)$~$φ(x)$$arc\sin φ(x)$~$φ(x)$$\tanφ(x)$~$φ(x)$$arc\tanφ(x)$~$φ(x)$$\ln(1+φ(x))$~$φ(x)$$e^{φ(x)}-1$~$φ(x)$$a^{φ(x)}-1$~$φ(x)\ln a$$\sqrt[n]{1+φ(x)}-1$~$\frac{1}{n}φ(x)$$(1+φ(x))^{\mu-1}$~$\muφ(x)$$1-\cosφ(x)$~$\frac{(φ(x))^2}{2}$]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[课程表[练习MD用]]]></title>
    <url>%2Fposts%2Faf9757c5%2F</url>
    <content type="text"><![CDATA[星期一 星期二 星期三 星期四 星期五 08:00-09:50 高等数学 B402 程序设计基础 B507 高等数学 B429 程序设计基础 B507 10:10-12:00 体育 大学英语 B509 14:00-15:50 大学英语 听力楼-2-304 高等数学 B402 16:10-18:00 大学心理健康 B211 19:00—— 中国近代史 B429 形势与政策 B429]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>练习</tag>
        <tag>学生</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三蛋空间自建贴吧云签到]]></title>
    <url>%2Fposts%2F8a291f21%2F</url>
    <content type="text"><![CDATA[–这是我自建的贴吧云签到:http://dmly.tkopenshift自建贴吧签到(openshift有点繁琐但是稳定,后期出教程):http://tieba-tieba.193b.starter-ca-central-1.openshiftapps.com之后为教程 注册免费空间首先你得注册一个三蛋空间的账号,三蛋空间注册网址:三蛋空间 创建网站注册完成之后点击这里 添加一个空模版,如图 写上名字和密码,点击create ftp下载SmartFTP Client或者其他你熟悉的ftp上传工具,这里百度就行了进入三蛋空间的管理网站,点击这里,如图 把这里的信息填入SmartFTP Client中 然后点ok 上传贴吧云签到源码github地址:Tieba-Cloud-Sign点击这里下载zip并解压 将解压得到的所有文件拖入ftp上的public_html文件夹中 创建数据库然后进入三蛋空间创建数据库三蛋空间会自动给你的数据库名字前加上数字,所以之后在贴吧安装中要注意 安装之后进入你的网站,然后安装就行了. 创建cron job安装完成后就要把do.php加入cron,否则是不会自动签到的,按图中的步骤进行]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>免费</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更改绑定手机号]]></title>
    <url>%2Fposts%2F3fee5f2%2F</url>
    <content type="text"><![CDATA[绑定手机号：微信，网易云，淘宝原手机号及证件，支付宝，google银行卡，贴吧，酷安，微博需要原手机号，bilibili（需要原手机号)微软,欢喜云，京东（原手机号及银行卡，非我的实名认证）天猫，银行卡，steam，小冰，yy(需要原手机号)]]></content>
      <categories>
        <category>日常生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C输出字符串的ASCII码]]></title>
    <url>%2Fposts%2Fundefined%2F</url>
    <content type="text"><![CDATA[123456789101112#include &lt;stdio.h&gt;int main()&#123;char str[]=”This is a string!”;int i=0;while(str[i]!=’\0′)&#123;printf(“%c=%d\n”,str[i],str[i]);i++;&#125;printf(“%c=%d\n”,str[i],str[i]);&#125;]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>c语言</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
